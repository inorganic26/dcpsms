rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // =========================================
    // 공통 헬퍼
    // =========================================
    function isAuthenticated() {
      return request.auth != null;
    }

    // TODO: 실제 운영에서는 custom claims 로
    //       request.auth.token.role in ['admin','teacher']
    //       이런 식으로 체크해야 함.
    function isAdminOrTeacher() {
      return isAuthenticated();
    }

    // =========================================
    // 시험 결과 리포트 PDF
    //
    // 현재 student 화면에서 reportManager가
    // storage의 reports/{classId}/... 경로를 열람/목록(GET)하려고 하는데
    // 기존 규칙은 "학생 uid랑 학생 이름 매칭" 등 복잡한 조건이라서 403 터졌어.
    //
    // 여기서는 일단 "로그인만 돼 있으면 읽기 가능"으로 완화해서
    // 학생이 자기 리포트를 볼 수 있게 만든다.
    //
    // 교사/관리자만 업로드/수정 가능하도록 write 제한.
    // =========================================
    match /reports/{classId}/{allPaths=**} {
      // 학생 / 교사 / 관리자: 로그인만 되어 있으면 읽기(다운로드/목록) 허용
      allow read: if isAuthenticated();

      // 업로드/수정/삭제는 교사 또는 관리자만 (현재는 isAuthenticated()와 동일로 돼있지만,
      // 나중에 role 분리하면 여기만 tighten 하면 됨)
      allow write: if isAdminOrTeacher();
    }

    // =========================================
    // 숙제 제출 이미지
    //
    // Path: /homeworks/{homeworkId}/{studentUid}/{fileName}
    //  - studentUid 는 프런트에서 request.auth.uid(익명 UID)를 그대로 쓰는 구조
    //  - 학생은 자기 폴더만 읽고/쓰기 가능
    //  - 교사/관리자는 아무거나 접근 가능
    // =========================================
    match /homeworks/{homeworkId}/{studentUid}/{fileName} {
      // 읽기
      allow read: if isAuthenticated() &&
                   (request.auth.uid == studentUid || isAdminOrTeacher());

      // 쓰기/삭제
      allow write: if isAuthenticated() &&
                    (request.auth.uid == studentUid || isAdminOrTeacher());
    }

    // =========================================
    // 기본 거부
    // =========================================
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
