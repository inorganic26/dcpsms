rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }
    function isTeacher() {
      return request.auth != null && request.auth.token.role == 'teacher';
    }
    function isStudent(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    function isAuthenticated() {
      return request.auth != null;
    }
    // Check if the user is a student of a class
    function isStudentOfClass(classId) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/students/$(request.auth.uid)).data.classId == classId;
    }
    // classLectures
    match /classLectures/{lectureId} {
      allow read: if isAdmin() || isTeacher() || isStudentOfClass(resource.data.classId);
      allow write: if isAdmin() || isTeacher();
    }
    // classes
    match /classes/{classId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isTeacher();
    }
    // students
    match /students/{studentId} {
      allow read: if isAdmin() || isTeacher() || isStudent(studentId);
      allow write: if isAdmin() || isStudent(studentId);
    }
    // teachers
    match /teachers/{teacherId} {
      allow read: if isAdmin() || isTeacher() || request.auth.uid == teacherId;
      allow write: if isAdmin() || request.auth.uid == teacherId;
    }
    // subjects - 추가됨
    match /subjects/{subjectId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isTeacher();
      
      // lessons 하위 컬렉션 추가!
      match /lessons/{lessonId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin() || isTeacher();
      }
      
      // textbooks 하위 컬렉션
      match /textbooks/{textbookId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin() || isTeacher();
      }
    }
    // assignments
    match /assignments/{assignmentId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isTeacher();
    }
    // submissions
    match /submissions/{submissionId} {
      allow read: if isAdmin() || isTeacher() ||
                     (isAuthenticated() &&
                      resource.data.studentId == request.auth.uid);
      allow write: if isAdmin() ||
                      (isTeacher() &&
                       resource.data.assignmentId != null);
    }
    // grading
    match /grading/{gradeId} {
      allow read: if isAdmin() || isTeacher() ||
                     (isAuthenticated() &&
                      resource.data.studentId == request.auth.uid);
      allow write: if isAdmin() || isTeacher();
    }
    // notices
    match /notices/{noticeId} {
      allow read: if true;
      allow write: if isAdmin() || isTeacher();
    }
    // comments
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    // messages
    match /messages/{messageId} {
      allow read, write: if isAuthenticated();
    }
    // attendance
    match /attendance/{recordId} {
      allow read: if isAdmin() || isTeacher() || isStudent(resource.data.studentId);
      allow write: if isAdmin() || isTeacher();
    }
    // aiAnalysis
    match /aiAnalysis/{analysisId} {
      allow read: if isAdmin() || isTeacher();
      allow write: if isAdmin() || isTeacher();
    }
    // analytics
    match /analytics/{docId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    // fallback
    match /{document=**} {
      allow read, write: if false;
    }
  }
}