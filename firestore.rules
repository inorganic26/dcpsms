rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }
    function isTeacher() {
      // 선생님 앱은 이름/비번 로그인을 사용하므로 Custom Claim 'role'이 없을 수 있습니다.
      // 실제 앱에서는 교사 인증 방식을 명확히 하고 규칙을 조정해야 합니다.
      // 여기서는 규칙의 기본 구조를 유지합니다.
      return request.auth != null && request.auth.token.role == 'teacher';
    }
    function isStudent(userId) {
      // 학생 앱은 익명 로그인을 사용하므로, 실제 앱에서는 학생 인증 방식을 확인해야 합니다.
      // 현재 규칙은 Custom Claims나 특정 필드를 사용하지 않고 UID만 비교합니다.
      // 학생 앱 로그인 로직(studentAuth.js)에서는 UID를 직접 사용하지 않으므로,
      // 학생 본인 확인을 위한 더 나은 방법(예: Cloud Function 호출 또는 Custom Claim 사용)이 필요할 수 있습니다.
      // 여기서는 규칙의 기본 구조를 유지합니다.
      return request.auth != null && request.auth.uid == userId;
    }
    function isAuthenticated() {
      // 익명 로그인 포함 모든 인증된 사용자를 허용합니다.
      return request.auth != null;
    }
    // Check if the user is a student currently assigned to a class
    function isStudentOfClass(classId) {
      // 학생 앱은 익명 로그인을 사용하므로 request.auth.uid가 학생 ID와 일치하지 않을 수 있습니다.
      // 실제 학생 ID는 앱 상태(state.studentId)에 저장되지만 규칙에서는 직접 접근 불가합니다.
      // 따라서 이 함수는 현재 학생 앱의 익명 인증 방식에서는 의도대로 동작하지 않을 수 있습니다.
      // 여기서는 예시 구조를 유지합니다. 실제 학생 ID 확인 로직이 필요합니다.
      // 'exists'를 사용하여 학생 문서 존재 여부를 확인하는 것이 더 안전할 수 있습니다.
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/students/$(request.auth.uid)) && // 학생 문서 존재 확인 (선택적이지만 권장)
             get(/databases/$(database)/documents/students/$(request.auth.uid)).data.classId == classId;
    }

    // --- homeworks 컬렉션 ---
    match /homeworks/{homeworkId} {
      // 숙제 정보 읽기: 인증된 사용자 (학생, 교사, 관리자)
      allow read: if isAuthenticated(); // 'get'과 'list' 모두 허용
      // 숙제 생성/수정/삭제: 관리자 또는 교사
      allow write: if isAdmin() || isTeacher(); // 생성, 수정, 삭제 권한

      // 숙제 제출물 하위 컬렉션
      match /submissions/{studentId} {
        // 제출물 읽기: 관리자, 교사, 또는 제출한 학생 본인 (규칙상 UID 기준)
        allow read: if isAdmin() || isTeacher() || isStudent(studentId);
        // 제출물 쓰기 (생성/수정): 제출하는 학생 본인 (규칙상 UID 기준)
        // 주의: 학생 앱은 익명 인증을 사용하므로 isStudent(studentId)가 예상대로 동작하지 않을 수 있음.
        //   익명 UID 대신 실제 학생 ID를 확인하는 메커니즘이 필요할 수 있음 (예: Cloud Function).
        allow write: if isStudent(studentId);
      }
    }

    // classLectures (현강반 수업 영상)
    match /classLectures/{lectureId} {
      // 읽기: 관리자, 교사, 또는 해당 반 학생 (isStudentOfClass 함수의 한계점 참고)
      allow read: if isAdmin() || isTeacher() || isStudentOfClass(resource.data.classId);
      // 쓰기: 관리자 또는 교사
      allow write: if isAdmin() || isTeacher();
    }
    // classes (반 정보)
    match /classes/{classId} {
      // 읽기: 인증된 사용자
      allow read: if isAuthenticated(); // 'get'과 'list' 모두 허용
      // 쓰기: 관리자 또는 교사
      allow write: if isAdmin() || isTeacher();
    }
    // students (학생 정보)
    match /students/{studentId} {
      // ✅ 로그인 드롭다운 채우기 위해 'list' 권한 추가 (인증된 사용자면 누구나 목록 조회 가능)
      allow list: if isAuthenticated();
      // ✅ 기존의 특정 문서 읽기 권한은 'get'으로 명시
      allow get: if isAdmin() || isTeacher() || isStudent(studentId);

      // ✅ 쓰기 권한 세분화
      allow create, delete: if isAdmin(); // 생성, 삭제는 관리자만
      allow update: if isAdmin() ||
                      // 학생 본인은 비밀번호 관련 필드만 수정 가능하도록 제한 (예시)
                      (isStudent(studentId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['password', 'isInitialPassword']));
                      // 참고: isStudent(studentId) 함수의 한계점 고려 필요
    }
    // teachers (교사 정보)
    match /teachers/{teacherId} {
      // 읽기: 관리자 또는 교사 본인 (UID 기준, 현재 교사 앱 로그인 방식과 불일치 가능성 있음)
      allow read: if isAdmin() || request.auth.uid == teacherId;
      // 쓰기: 관리자 또는 교사 본인 (UID 기준, 필드 제한 필요)
      allow create, delete: if isAdmin();
      allow update: if isAdmin() ||
                      // 교사 본인은 비밀번호 관련 필드만 수정 가능하도록 제한 (예시)
                      (request.auth.uid == teacherId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['password', 'isInitialPassword']));
    }
    // subjects (과목 정보)
    match /subjects/{subjectId} {
      // 읽기: 인증된 사용자
      allow read: if isAuthenticated(); // 'get'과 'list' 모두 허용
      // 쓰기: 관리자 또는 교사
      allow write: if isAdmin() || isTeacher();

      // lessons 하위 컬렉션 (학습 세트)
      match /lessons/{lessonId} {
        // 읽기: 인증된 사용자
        allow read: if isAuthenticated(); // 'get'과 'list' 모두 허용
        // 쓰기: 관리자 또는 교사
        allow write: if isAdmin() || isTeacher();

        // lesson submissions 하위 컬렉션 (학생 학습 기록)
        match /submissions/{studentId} {
            // 읽기: 관리자, 교사, 또는 학생 본인 (isStudent 한계점 참고)
            allow read: if isAdmin() || isTeacher() || isStudent(studentId);
            // 쓰기: 학생 본인 (isStudent 한계점 참고)
            allow write: if isStudent(studentId);
        }
      }

      // textbooks 하위 컬렉션 (교재)
      match /textbooks/{textbookId} {
        // 읽기: 인증된 사용자
        allow read: if isAuthenticated(); // 'get'과 'list' 모두 허용
        // 쓰기: 관리자 또는 교사
        allow write: if isAdmin() || isTeacher();
      }
    }

    // grading (채점 정보 - 현재 코드에서는 사용 안 하는 것으로 보임)
    match /grading/{gradeId} {
      allow read: if isAdmin() || isTeacher() ||
                     (isAuthenticated() && resource.data.studentId == request.auth.uid); // isStudent(studentId) 사용 불가, resource.data 접근
      allow write: if isAdmin() || isTeacher();
    }
    // notices (공지사항 - 현재 코드에서는 사용 안 하는 것으로 보임)
    match /notices/{noticeId} {
      allow read: if true; // 모든 사용자 읽기 가능
      allow write: if isAdmin() || isTeacher();
    }
    // comments (댓글 - 현재 코드에서는 사용 안 하는 것으로 보임, 규칙 강화 필요)
    match /comments/{commentId} {
      // 주의: 너무 허용적인 규칙입니다. 실제 사용 시 수정 필요
      allow read, write: if isAuthenticated();
    }
    // messages (메시지 - 현재 코드에서는 사용 안 하는 것으로 보임, 규칙 강화 필요)
    match /messages/{messageId} {
      // 주의: 너무 허용적인 규칙입니다. 실제 사용 시 수정 필요
      allow read, write: if isAuthenticated();
    }
    // attendance (출석 - 현재 코드에서는 사용 안 하는 것으로 보임)
    match /attendance/{recordId} {
      allow read: if isAdmin() || isTeacher() || (isAuthenticated() && resource.data.studentId == request.auth.uid); // isStudent 한계점 참고, resource.data 접근
      allow write: if isAdmin() || isTeacher();
    }
    // aiAnalysis (AI 분석 결과 - 현재 코드에서는 사용 안 하는 것으로 보임)
    match /aiAnalysis/{analysisId} {
      allow read, write: if isAdmin() || isTeacher();
    }
    // analytics (분석 데이터 - 현재 코드에서는 사용 안 하는 것으로 보임)
    match /analytics/{docId} {
      allow read, write: if isAdmin();
    }
    // classVideos (질문 영상 - 구 버전, classLectures로 통합 권장)
    match /classVideos/{videoId} {
        // 읽기: 관리자, 교사, 또는 해당 반 학생 (isStudentOfClass 함수의 한계점 참고)
        allow read: if isAdmin() || isTeacher() || isStudentOfClass(resource.data.classId);
        // 쓰기: 관리자 또는 교사
        allow write: if isAdmin() || isTeacher();
    }

    // fallback (기본 거부 규칙)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}